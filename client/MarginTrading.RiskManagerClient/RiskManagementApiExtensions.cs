// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MarginTrading.RiskManagerClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RiskManagementApi.
    /// </summary>
    public static partial class RiskManagementApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static IList<string> ApiAssetsGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiAssetsGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> ApiAssetsGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAssetsGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static IList<CorrCoeff> ApiCorrCoeffGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiCorrCoeffGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CorrCoeff>> ApiCorrCoeffGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCorrCoeffGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void ApiCorrCoeffPost(this IRiskManagementApi operations, string apiKey, IList<CorrCoeffOverrideModel> model = default(IList<CorrCoeffOverrideModel>))
            {
                operations.ApiCorrCoeffPostAsync(apiKey, model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiCorrCoeffPostAsync(this IRiskManagementApi operations, string apiKey, IList<CorrCoeffOverrideModel> model = default(IList<CorrCoeffOverrideModel>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiCorrCoeffPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='assetX'>
            /// </param>
            /// <param name='assetY'>
            /// </param>
            public static void ApiCorrCoeffDelete(this IRiskManagementApi operations, string apiKey, string assetX = default(string), string assetY = default(string))
            {
                operations.ApiCorrCoeffDeleteAsync(apiKey, assetX, assetY).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='assetX'>
            /// </param>
            /// <param name='assetY'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiCorrCoeffDeleteAsync(this IRiskManagementApi operations, string apiKey, string assetX = default(string), string assetY = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiCorrCoeffDeleteWithHttpMessagesAsync(apiKey, assetX, assetY, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ApiIsaliveGet(this IRiskManagementApi operations)
            {
                operations.ApiIsaliveGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiIsaliveGetAsync(this IRiskManagementApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiIsaliveGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static IList<IVaRMonitor> ApiIvarlimitGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiIvarlimitGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IVaRMonitor>> ApiIvarlimitGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIvarlimitGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void ApiIvarlimitPost(this IRiskManagementApi operations, string apiKey, IList<IVaRLimit> model = default(IList<IVaRLimit>))
            {
                operations.ApiIvarlimitPostAsync(apiKey, model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiIvarlimitPostAsync(this IRiskManagementApi operations, string apiKey, IList<IVaRLimit> model = default(IList<IVaRLimit>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiIvarlimitPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            /// <param name='assetId'>
            /// </param>
            public static void ApiIvarlimitDelete(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), string assetId = default(string))
            {
                operations.ApiIvarlimitDeleteAsync(apiKey, counterPartyId, assetId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiIvarlimitDeleteAsync(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), string assetId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiIvarlimitDeleteWithHttpMessagesAsync(apiKey, counterPartyId, assetId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static IList<MeanCoeff> ApiMeanGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiMeanGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MeanCoeff>> ApiMeanGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMeanGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void ApiMeanPost(this IRiskManagementApi operations, string apiKey, IList<MeanCoeffOverrideModel> model = default(IList<MeanCoeffOverrideModel>))
            {
                operations.ApiMeanPostAsync(apiKey, model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiMeanPostAsync(this IRiskManagementApi operations, string apiKey, IList<MeanCoeffOverrideModel> model = default(IList<MeanCoeffOverrideModel>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiMeanPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='assetId'>
            /// </param>
            public static void ApiMeanDelete(this IRiskManagementApi operations, string apiKey, string assetId = default(string))
            {
                operations.ApiMeanDeleteAsync(apiKey, assetId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiMeanDeleteAsync(this IRiskManagementApi operations, string apiKey, string assetId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiMeanDeleteWithHttpMessagesAsync(apiKey, assetId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static IList<PnLMonitor> ApiPnllimitGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiPnllimitGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PnLMonitor>> ApiPnllimitGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPnllimitGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void ApiPnllimitPost(this IRiskManagementApi operations, string apiKey, IList<PnLLimit> model = default(IList<PnLLimit>))
            {
                operations.ApiPnllimitPostAsync(apiKey, model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPnllimitPostAsync(this IRiskManagementApi operations, string apiKey, IList<PnLLimit> model = default(IList<PnLLimit>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiPnllimitPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            public static void ApiPnllimitDelete(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string))
            {
                operations.ApiPnllimitDeleteAsync(apiKey, counterPartyId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPnllimitDeleteAsync(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiPnllimitDeleteWithHttpMessagesAsync(apiKey, counterPartyId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static IList<PositionMonitor> ApiPositionlimitGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiPositionlimitGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PositionMonitor>> ApiPositionlimitGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPositionlimitGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void ApiPositionlimitPost(this IRiskManagementApi operations, string apiKey, IList<PositionLimit> model = default(IList<PositionLimit>))
            {
                operations.ApiPositionlimitPostAsync(apiKey, model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPositionlimitPostAsync(this IRiskManagementApi operations, string apiKey, IList<PositionLimit> model = default(IList<PositionLimit>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiPositionlimitPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            /// <param name='assetId'>
            /// </param>
            public static void ApiPositionlimitDelete(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), string assetId = default(string))
            {
                operations.ApiPositionlimitDeleteAsync(apiKey, counterPartyId, assetId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPositionlimitDeleteAsync(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), string assetId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiPositionlimitDeleteWithHttpMessagesAsync(apiKey, counterPartyId, assetId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static IList<PVaRConcentrationMonitor> ApiPvarconcentrationlimitGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiPvarconcentrationlimitGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PVaRConcentrationMonitor>> ApiPvarconcentrationlimitGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPvarconcentrationlimitGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void ApiPvarconcentrationlimitPost(this IRiskManagementApi operations, string apiKey, IList<PVaRConcentrationLimit> model = default(IList<PVaRConcentrationLimit>))
            {
                operations.ApiPvarconcentrationlimitPostAsync(apiKey, model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPvarconcentrationlimitPostAsync(this IRiskManagementApi operations, string apiKey, IList<PVaRConcentrationLimit> model = default(IList<PVaRConcentrationLimit>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiPvarconcentrationlimitPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            /// <param name='makerCounterPartyId'>
            /// </param>
            public static void ApiPvarconcentrationlimitDelete(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), string makerCounterPartyId = default(string))
            {
                operations.ApiPvarconcentrationlimitDeleteAsync(apiKey, counterPartyId, makerCounterPartyId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            /// <param name='makerCounterPartyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPvarconcentrationlimitDeleteAsync(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), string makerCounterPartyId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiPvarconcentrationlimitDeleteWithHttpMessagesAsync(apiKey, counterPartyId, makerCounterPartyId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static IList<PVaRMonitor> ApiPvarlimitGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiPvarlimitGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PVaRMonitor>> ApiPvarlimitGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPvarlimitGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void ApiPvarlimitPost(this IRiskManagementApi operations, string apiKey, IList<PVaRLimit> model = default(IList<PVaRLimit>))
            {
                operations.ApiPvarlimitPostAsync(apiKey, model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPvarlimitPostAsync(this IRiskManagementApi operations, string apiKey, IList<PVaRLimit> model = default(IList<PVaRLimit>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiPvarlimitPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            public static void ApiPvarlimitDelete(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string))
            {
                operations.ApiPvarlimitDeleteAsync(apiKey, counterPartyId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPvarlimitDeleteAsync(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiPvarlimitDeleteWithHttpMessagesAsync(apiKey, counterPartyId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static IList<StDevCoeff> ApiSigmaGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiSigmaGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<StDevCoeff>> ApiSigmaGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiSigmaGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void ApiSigmaPost(this IRiskManagementApi operations, string apiKey, IList<StDevCoeffOverrideModel> model = default(IList<StDevCoeffOverrideModel>))
            {
                operations.ApiSigmaPostAsync(apiKey, model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiSigmaPostAsync(this IRiskManagementApi operations, string apiKey, IList<StDevCoeffOverrideModel> model = default(IList<StDevCoeffOverrideModel>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiSigmaPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='assetId'>
            /// </param>
            public static void ApiSigmaDelete(this IRiskManagementApi operations, string apiKey, string assetId = default(string))
            {
                operations.ApiSigmaDeleteAsync(apiKey, assetId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiSigmaDeleteAsync(this IRiskManagementApi operations, string apiKey, string assetId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiSigmaDeleteWithHttpMessagesAsync(apiKey, assetId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static ISystemParameters ApiSystemParametersGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiSystemParametersGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ISystemParameters> ApiSystemParametersGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiSystemParametersGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
