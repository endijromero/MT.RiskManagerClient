// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MarginTrading.RiskManagerClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RiskManagementApi.
    /// </summary>
    public static partial class RiskManagementApiExtensions
    {
            /// <summary>
            /// Returns list of individual assets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static IList<string> ApiAssetsGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiAssetsGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns list of individual assets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> ApiAssetsGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAssetsGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve current state of correlation coefficient cache which is used for
            /// calculation - with live and overriden parameters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static IList<CorrCoeffResponse> ApiCorrCoeffGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiCorrCoeffGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve current state of correlation coefficient cache which is used for
            /// calculation - with live and overriden parameters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CorrCoeffResponse>> ApiCorrCoeffGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCorrCoeffGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Override a coefficient
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// Collection of overriding coefficients
            /// </param>
            public static void ApiCorrCoeffPost(this IRiskManagementApi operations, string apiKey, IList<CorrCoeffOverrideModel> model = default(IList<CorrCoeffOverrideModel>))
            {
                operations.ApiCorrCoeffPostAsync(apiKey, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Override a coefficient
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// Collection of overriding coefficients
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiCorrCoeffPostAsync(this IRiskManagementApi operations, string apiKey, IList<CorrCoeffOverrideModel> model = default(IList<CorrCoeffOverrideModel>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiCorrCoeffPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancel overriding of a coefficient with given coordinates
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='assetX'>
            /// X coordinate in correlation matrix
            /// </param>
            /// <param name='assetY'>
            /// Y coordinate in correlation matrix
            /// </param>
            public static void ApiCorrCoeffDelete(this IRiskManagementApi operations, string apiKey, string assetX = default(string), string assetY = default(string))
            {
                operations.ApiCorrCoeffDeleteAsync(apiKey, assetX, assetY).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel overriding of a coefficient with given coordinates
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='assetX'>
            /// X coordinate in correlation matrix
            /// </param>
            /// <param name='assetY'>
            /// Y coordinate in correlation matrix
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiCorrCoeffDeleteAsync(this IRiskManagementApi operations, string apiKey, string assetX = default(string), string assetY = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiCorrCoeffDeleteWithHttpMessagesAsync(apiKey, assetX, assetY, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns execution state and version of running service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ApiIsaliveGet(this IRiskManagementApi operations)
            {
                operations.ApiIsaliveGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns execution state and version of running service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiIsaliveGetAsync(this IRiskManagementApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiIsaliveGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Sets a collection of limits
            /// If a limit in collection exists, it will be overwritten
            /// If does not exist, new will be created
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// Collection of limit objects
            /// </param>
            public static void ApiIvarlimitPost(this IRiskManagementApi operations, string apiKey, IList<IVaRLimitModel> model = default(IList<IVaRLimitModel>))
            {
                operations.ApiIvarlimitPostAsync(apiKey, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets a collection of limits
            /// If a limit in collection exists, it will be overwritten
            /// If does not exist, new will be created
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// Collection of limit objects
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiIvarlimitPostAsync(this IRiskManagementApi operations, string apiKey, IList<IVaRLimitModel> model = default(IList<IVaRLimitModel>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiIvarlimitPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes limit and monitor for given parameters if exists, does nothing
            /// otherwise
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// trader/maker identification
            /// </param>
            /// <param name='assetId'>
            /// asset on which the limit is applied
            /// </param>
            public static void ApiIvarlimitDelete(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), string assetId = default(string))
            {
                operations.ApiIvarlimitDeleteAsync(apiKey, counterPartyId, assetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes limit and monitor for given parameters if exists, does nothing
            /// otherwise
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// trader/maker identification
            /// </param>
            /// <param name='assetId'>
            /// asset on which the limit is applied
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiIvarlimitDeleteAsync(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), string assetId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiIvarlimitDeleteWithHttpMessagesAsync(apiKey, counterPartyId, assetId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves current state of concrete limit monitor.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterparty'>
            /// </param>
            /// <param name='asset'>
            /// </param>
            public static IVaRMonitorResponse ApiIvarlimitGetByCounterpartyAndAssetGet(this IRiskManagementApi operations, string apiKey, string counterparty = default(string), string asset = default(string))
            {
                return operations.ApiIvarlimitGetByCounterpartyAndAssetGetAsync(apiKey, counterparty, asset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves current state of concrete limit monitor.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterparty'>
            /// </param>
            /// <param name='asset'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IVaRMonitorResponse> ApiIvarlimitGetByCounterpartyAndAssetGetAsync(this IRiskManagementApi operations, string apiKey, string counterparty = default(string), string asset = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIvarlimitGetByCounterpartyAndAssetGetWithHttpMessagesAsync(apiKey, counterparty, asset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves current state of limit monitor collection. Gives all implicitly
            /// set limits and all breached Default limits.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static IList<IVaRMonitorResponse> ApiIvarlimitGetAllGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiIvarlimitGetAllGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves current state of limit monitor collection. Gives all implicitly
            /// set limits and all breached Default limits.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IVaRMonitorResponse>> ApiIvarlimitGetAllGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIvarlimitGetAllGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Track current values of mean coefficients
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static IList<MeanCoeffResponse> ApiMeanGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiMeanGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Track current values of mean coefficients
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MeanCoeffResponse>> ApiMeanGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMeanGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Overriding mean coefficiens
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void ApiMeanPost(this IRiskManagementApi operations, string apiKey, IList<MeanCoeffOverrideModel> model = default(IList<MeanCoeffOverrideModel>))
            {
                operations.ApiMeanPostAsync(apiKey, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Overriding mean coefficiens
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiMeanPostAsync(this IRiskManagementApi operations, string apiKey, IList<MeanCoeffOverrideModel> model = default(IList<MeanCoeffOverrideModel>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiMeanPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancel overriding of a mean coefficient
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='assetId'>
            /// </param>
            public static void ApiMeanDelete(this IRiskManagementApi operations, string apiKey, string assetId = default(string))
            {
                operations.ApiMeanDeleteAsync(apiKey, assetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel overriding of a mean coefficient
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiMeanDeleteAsync(this IRiskManagementApi operations, string apiKey, string assetId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiMeanDeleteWithHttpMessagesAsync(apiKey, assetId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieve requested NetOpenPositions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// trader identification
            /// </param>
            /// <param name='assetId'>
            /// asset
            /// </param>
            public static IList<NetOpenPositionResponse> ApiNetopenpositionGet(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), string assetId = default(string))
            {
                return operations.ApiNetopenpositionGetAsync(apiKey, counterPartyId, assetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve requested NetOpenPositions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// trader identification
            /// </param>
            /// <param name='assetId'>
            /// asset
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetOpenPositionResponse>> ApiNetopenpositionGetAsync(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), string assetId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiNetopenpositionGetWithHttpMessagesAsync(apiKey, counterPartyId, assetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets collection of limits
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void ApiPnllimitPost(this IRiskManagementApi operations, string apiKey, IList<PnLLimitModel> model = default(IList<PnLLimitModel>))
            {
                operations.ApiPnllimitPostAsync(apiKey, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets collection of limits
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPnllimitPostAsync(this IRiskManagementApi operations, string apiKey, IList<PnLLimitModel> model = default(IList<PnLLimitModel>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiPnllimitPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes limits for given counterparty
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            public static void ApiPnllimitDelete(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string))
            {
                operations.ApiPnllimitDeleteAsync(apiKey, counterPartyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes limits for given counterparty
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPnllimitDeleteAsync(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiPnllimitDeleteWithHttpMessagesAsync(apiKey, counterPartyId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves collection of limit monitors. Gives all implicitly set limits and
            /// all breached Default limits.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static IList<PnLMonitorResponse> ApiPnllimitGetAllGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiPnllimitGetAllGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves collection of limit monitors. Gives all implicitly set limits and
            /// all breached Default limits.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PnLMonitorResponse>> ApiPnllimitGetAllGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPnllimitGetAllGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets a collection of limits
            /// If a limit in collection exists, it will be overwritten
            /// If does not exist, new will be created
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// Collection of limit objects
            /// </param>
            public static void ApiPositionlimitPost(this IRiskManagementApi operations, string apiKey, IList<PositionLimitModel> model = default(IList<PositionLimitModel>))
            {
                operations.ApiPositionlimitPostAsync(apiKey, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets a collection of limits
            /// If a limit in collection exists, it will be overwritten
            /// If does not exist, new will be created
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// Collection of limit objects
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPositionlimitPostAsync(this IRiskManagementApi operations, string apiKey, IList<PositionLimitModel> model = default(IList<PositionLimitModel>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiPositionlimitPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes limit and monitor for given parameters if exists, does nothing
            /// otherwise
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// trader/maker identification
            /// </param>
            /// <param name='assetId'>
            /// asset on which the limit is applied
            /// </param>
            public static void ApiPositionlimitDelete(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), string assetId = default(string))
            {
                operations.ApiPositionlimitDeleteAsync(apiKey, counterPartyId, assetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes limit and monitor for given parameters if exists, does nothing
            /// otherwise
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// trader/maker identification
            /// </param>
            /// <param name='assetId'>
            /// asset on which the limit is applied
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPositionlimitDeleteAsync(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), string assetId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiPositionlimitDeleteWithHttpMessagesAsync(apiKey, counterPartyId, assetId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves current state of concrete limit monitor.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            /// <param name='assetId'>
            /// </param>
            public static PositionMonitorResponse ApiPositionlimitGetByCounterpartyAndAssetGet(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), string assetId = default(string))
            {
                return operations.ApiPositionlimitGetByCounterpartyAndAssetGetAsync(apiKey, counterPartyId, assetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves current state of concrete limit monitor.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PositionMonitorResponse> ApiPositionlimitGetByCounterpartyAndAssetGetAsync(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), string assetId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPositionlimitGetByCounterpartyAndAssetGetWithHttpMessagesAsync(apiKey, counterPartyId, assetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves current state of limit monitor collection. Gives all implicitly
            /// set limits and all breached Default limits.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static IList<PositionMonitorResponse> ApiPositionlimitGetAllGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiPositionlimitGetAllGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves current state of limit monitor collection. Gives all implicitly
            /// set limits and all breached Default limits.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PositionMonitorResponse>> ApiPositionlimitGetAllGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPositionlimitGetAllGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Setting limits
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// PVaR concentration limit: 0 lower than SOFT lower than HARD lower than 1
            /// </param>
            public static void ApiPvarconcentrationlimitPost(this IRiskManagementApi operations, string apiKey, IList<PVaRConcentrationLimitModel> model = default(IList<PVaRConcentrationLimitModel>))
            {
                operations.ApiPvarconcentrationlimitPostAsync(apiKey, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Setting limits
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// PVaR concentration limit: 0 lower than SOFT lower than HARD lower than 1
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPvarconcentrationlimitPostAsync(this IRiskManagementApi operations, string apiKey, IList<PVaRConcentrationLimitModel> model = default(IList<PVaRConcentrationLimitModel>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiPvarconcentrationlimitPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Clearing the limit for given counterparty
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            /// <param name='makerCounterPartyId'>
            /// </param>
            public static void ApiPvarconcentrationlimitDelete(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), string makerCounterPartyId = default(string))
            {
                operations.ApiPvarconcentrationlimitDeleteAsync(apiKey, counterPartyId, makerCounterPartyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Clearing the limit for given counterparty
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            /// <param name='makerCounterPartyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPvarconcentrationlimitDeleteAsync(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), string makerCounterPartyId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiPvarconcentrationlimitDeleteWithHttpMessagesAsync(apiKey, counterPartyId, makerCounterPartyId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves current state of concrete limit monitor.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            /// <param name='makerCounterPartyId'>
            /// </param>
            public static PVaRConcentrationMonitorResponse ApiPvarconcentrationlimitGetByCounterpartyGet(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), string makerCounterPartyId = default(string))
            {
                return operations.ApiPvarconcentrationlimitGetByCounterpartyGetAsync(apiKey, counterPartyId, makerCounterPartyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves current state of concrete limit monitor.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            /// <param name='makerCounterPartyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PVaRConcentrationMonitorResponse> ApiPvarconcentrationlimitGetByCounterpartyGetAsync(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), string makerCounterPartyId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPvarconcentrationlimitGetByCounterpartyGetWithHttpMessagesAsync(apiKey, counterPartyId, makerCounterPartyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves current state of limit monitor collection. Gives all implicitly
            /// set limits and all breached Default limits.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static IList<PVaRConcentrationMonitorResponse> ApiPvarconcentrationlimitGetAllGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiPvarconcentrationlimitGetAllGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves current state of limit monitor collection. Gives all implicitly
            /// set limits and all breached Default limits.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PVaRConcentrationMonitorResponse>> ApiPvarconcentrationlimitGetAllGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPvarconcentrationlimitGetAllGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets limits
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void ApiPvarlimitPost(this IRiskManagementApi operations, string apiKey, IList<PVaRLimitModel> model = default(IList<PVaRLimitModel>))
            {
                operations.ApiPvarlimitPostAsync(apiKey, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets limits
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPvarlimitPostAsync(this IRiskManagementApi operations, string apiKey, IList<PVaRLimitModel> model = default(IList<PVaRLimitModel>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiPvarlimitPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Clears all limits for a given counterparty
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            public static void ApiPvarlimitDelete(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string))
            {
                operations.ApiPvarlimitDeleteAsync(apiKey, counterPartyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Clears all limits for a given counterparty
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='counterPartyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPvarlimitDeleteAsync(this IRiskManagementApi operations, string apiKey, string counterPartyId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiPvarlimitDeleteWithHttpMessagesAsync(apiKey, counterPartyId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves current state of limit monitor collection. Gives all implicitly
            /// set limits and all breached Default limits.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static IList<PVaRMonitorResponse> ApiPvarlimitGetAllGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiPvarlimitGetAllGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves current state of limit monitor collection. Gives all implicitly
            /// set limits and all breached Default limits.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PVaRMonitorResponse>> ApiPvarlimitGetAllGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPvarlimitGetAllGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Track current values of sigma coefficients
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static IList<StDevCoeffResponse> ApiSigmaGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiSigmaGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Track current values of sigma coefficients
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<StDevCoeffResponse>> ApiSigmaGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiSigmaGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Overriding sigma coefficiens
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void ApiSigmaPost(this IRiskManagementApi operations, string apiKey, IList<StDevCoeffOverrideModel> model = default(IList<StDevCoeffOverrideModel>))
            {
                operations.ApiSigmaPostAsync(apiKey, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Overriding sigma coefficiens
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiSigmaPostAsync(this IRiskManagementApi operations, string apiKey, IList<StDevCoeffOverrideModel> model = default(IList<StDevCoeffOverrideModel>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiSigmaPostWithHttpMessagesAsync(apiKey, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancel overriding of a sigma coefficient
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='assetId'>
            /// </param>
            public static void ApiSigmaDelete(this IRiskManagementApi operations, string apiKey, string assetId = default(string))
            {
                operations.ApiSigmaDeleteAsync(apiKey, assetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel overriding of a sigma coefficient
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiSigmaDeleteAsync(this IRiskManagementApi operations, string apiKey, string assetId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiSigmaDeleteWithHttpMessagesAsync(apiKey, assetId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// GET Method
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            public static SystemParametersResponse ApiSystemParametersGet(this IRiskManagementApi operations, string apiKey)
            {
                return operations.ApiSystemParametersGetAsync(apiKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GET Method
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SystemParametersResponse> ApiSystemParametersGetAsync(this IRiskManagementApi operations, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiSystemParametersGetWithHttpMessagesAsync(apiKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fill positions special fields if they are empty.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='tradingPositions'>
            /// </param>
            public static object ApiTradingpositionPost(this IRiskManagementApi operations, string apiKey, IList<TradingPosition> tradingPositions = default(IList<TradingPosition>))
            {
                return operations.ApiTradingpositionPostAsync(apiKey, tradingPositions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fill positions special fields if they are empty.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiKey'>
            /// API Token
            /// </param>
            /// <param name='tradingPositions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiTradingpositionPostAsync(this IRiskManagementApi operations, string apiKey, IList<TradingPosition> tradingPositions = default(IList<TradingPosition>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTradingpositionPostWithHttpMessagesAsync(apiKey, tradingPositions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
