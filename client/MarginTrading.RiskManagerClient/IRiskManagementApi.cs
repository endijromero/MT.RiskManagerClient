// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MarginTrading.RiskManagerClient
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// </summary>
    public partial interface IRiskManagementApi : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Returns list of individual assets
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>>> ApiAssetsGetWithHttpMessagesAsync(string apiKey, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve current state of correlation coefficient cache which is
        /// used for calculation - with live and overriden parameters
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<CorrCoeffResponse>>> ApiCorrCoeffGetWithHttpMessagesAsync(string apiKey, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Override a coefficient
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='model'>
        /// Collection of overriding coefficients
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiCorrCoeffPostWithHttpMessagesAsync(string apiKey, IList<CorrCoeffOverrideModel> model = default(IList<CorrCoeffOverrideModel>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel overriding of a coefficient with given coordinates
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='assetX'>
        /// X coordinate in correlation matrix
        /// </param>
        /// <param name='assetY'>
        /// Y coordinate in correlation matrix
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiCorrCoeffDeleteWithHttpMessagesAsync(string apiKey, string assetX = default(string), string assetY = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns execution state and version of running service
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiIsaliveGetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets a collection of limits
        /// If a limit in collection exists, it will be overwritten
        /// If does not exist, new will be created
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='model'>
        /// Collection of limit objects
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiIvarlimitPostWithHttpMessagesAsync(string apiKey, IList<IVaRLimitModel> model = default(IList<IVaRLimitModel>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes limit and monitor for given parameters if exists, does
        /// nothing otherwise
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='counterPartyId'>
        /// trader/maker identification
        /// </param>
        /// <param name='assetId'>
        /// asset on which the limit is applied
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiIvarlimitDeleteWithHttpMessagesAsync(string apiKey, string counterPartyId = default(string), string assetId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves current state of concrete limit monitor.
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='counterparty'>
        /// </param>
        /// <param name='asset'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IVaRMonitorResponse>> ApiIvarlimitGetByCounterpartyAndAssetGetWithHttpMessagesAsync(string apiKey, string counterparty = default(string), string asset = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves current state of limit monitor collection. Gives all
        /// implicitly set limits and all breached Default limits.
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<IVaRMonitorResponse>>> ApiIvarlimitGetAllGetWithHttpMessagesAsync(string apiKey, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Track current values of mean coefficients
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<MeanCoeffResponse>>> ApiMeanGetWithHttpMessagesAsync(string apiKey, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Overriding mean coefficiens
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiMeanPostWithHttpMessagesAsync(string apiKey, IList<MeanCoeffOverrideModel> model = default(IList<MeanCoeffOverrideModel>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel overriding of a mean coefficient
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='assetId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiMeanDeleteWithHttpMessagesAsync(string apiKey, string assetId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve requested NetOpenPositions
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='counterPartyId'>
        /// trader identification
        /// </param>
        /// <param name='assetId'>
        /// asset
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<NetOpenPositionResponse>>> ApiNetopenpositionGetWithHttpMessagesAsync(string apiKey, string counterPartyId = default(string), string assetId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets collection of limits
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiPnllimitPostWithHttpMessagesAsync(string apiKey, IList<PnLLimitModel> model = default(IList<PnLLimitModel>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes limits for given counterparty
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='counterPartyId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiPnllimitDeleteWithHttpMessagesAsync(string apiKey, string counterPartyId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves collection of limit monitors. Gives all implicitly set
        /// limits and all breached Default limits.
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<PnLMonitorResponse>>> ApiPnllimitGetAllGetWithHttpMessagesAsync(string apiKey, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets a collection of limits
        /// If a limit in collection exists, it will be overwritten
        /// If does not exist, new will be created
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='model'>
        /// Collection of limit objects
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiPositionlimitPostWithHttpMessagesAsync(string apiKey, IList<PositionLimitModel> model = default(IList<PositionLimitModel>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes limit and monitor for given parameters if exists, does
        /// nothing otherwise
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='counterPartyId'>
        /// trader/maker identification
        /// </param>
        /// <param name='assetId'>
        /// asset on which the limit is applied
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiPositionlimitDeleteWithHttpMessagesAsync(string apiKey, string counterPartyId = default(string), string assetId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves current state of concrete limit monitor.
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='counterPartyId'>
        /// </param>
        /// <param name='assetId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PositionMonitorResponse>> ApiPositionlimitGetByCounterpartyAndAssetGetWithHttpMessagesAsync(string apiKey, string counterPartyId = default(string), string assetId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves current state of limit monitor collection. Gives all
        /// implicitly set limits and all breached Default limits.
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<PositionMonitorResponse>>> ApiPositionlimitGetAllGetWithHttpMessagesAsync(string apiKey, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Setting limits
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='model'>
        /// PVaR concentration limit: 0 lower than SOFT lower than HARD lower
        /// than 1
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiPvarconcentrationlimitPostWithHttpMessagesAsync(string apiKey, IList<PVaRConcentrationLimitModel> model = default(IList<PVaRConcentrationLimitModel>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Clearing the limit for given counterparty
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='counterPartyId'>
        /// </param>
        /// <param name='makerCounterPartyId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiPvarconcentrationlimitDeleteWithHttpMessagesAsync(string apiKey, string counterPartyId = default(string), string makerCounterPartyId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves current state of concrete limit monitor.
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='counterPartyId'>
        /// </param>
        /// <param name='makerCounterPartyId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PVaRConcentrationMonitorResponse>> ApiPvarconcentrationlimitGetByCounterpartyGetWithHttpMessagesAsync(string apiKey, string counterPartyId = default(string), string makerCounterPartyId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves current state of limit monitor collection. Gives all
        /// implicitly set limits and all breached Default limits.
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<PVaRConcentrationMonitorResponse>>> ApiPvarconcentrationlimitGetAllGetWithHttpMessagesAsync(string apiKey, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets limits
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiPvarlimitPostWithHttpMessagesAsync(string apiKey, IList<PVaRLimitModel> model = default(IList<PVaRLimitModel>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Clears all limits for a given counterparty
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='counterPartyId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiPvarlimitDeleteWithHttpMessagesAsync(string apiKey, string counterPartyId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves current state of limit monitor collection. Gives all
        /// implicitly set limits and all breached Default limits.
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<PVaRMonitorResponse>>> ApiPvarlimitGetAllGetWithHttpMessagesAsync(string apiKey, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Track current values of sigma coefficients
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<StDevCoeffResponse>>> ApiSigmaGetWithHttpMessagesAsync(string apiKey, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Overriding sigma coefficiens
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiSigmaPostWithHttpMessagesAsync(string apiKey, IList<StDevCoeffOverrideModel> model = default(IList<StDevCoeffOverrideModel>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel overriding of a sigma coefficient
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='assetId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApiSigmaDeleteWithHttpMessagesAsync(string apiKey, string assetId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// GET Method
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SystemParametersResponse>> ApiSystemParametersGetWithHttpMessagesAsync(string apiKey, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Fill positions special fields if they are empty.
        /// </summary>
        /// <param name='apiKey'>
        /// API Token
        /// </param>
        /// <param name='tradingPositions'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ApiTradingpositionPostWithHttpMessagesAsync(string apiKey, IList<TradingPosition> tradingPositions = default(IList<TradingPosition>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
