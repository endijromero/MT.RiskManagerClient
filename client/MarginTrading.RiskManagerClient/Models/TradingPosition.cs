// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MarginTrading.RiskManagerClient.Models
{
    using MarginTrading.RiskManagerClient;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class TradingPosition
    {
        /// <summary>
        /// Initializes a new instance of the TradingPosition class.
        /// </summary>
        public TradingPosition()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TradingPosition class.
        /// </summary>
        /// <param name="status">Possible values include: 'Open',
        /// 'Closed'</param>
        /// <param name="direction">Possible values include: 'Buy',
        /// 'Sell'</param>
        /// <param name="closeReason">Possible values include: 'None', 'Close',
        /// 'StopLoss', 'TakeProfit', 'StopOut', 'Canceled',
        /// 'CanceledBySystem'</param>
        /// <param name="fillType">Possible values include: 'FillOrKill',
        /// 'PartialFill'</param>
        public TradingPosition(PositionStatus status, TradingOrderDirection direction, double volume, double openPrice, OrderCloseReason closeReason, double openCommission, double closeCommission, double swapCommission, OrderFillType fillType, string id = default(string), string traderCounterPartyId = default(string), string traderAccountId = default(string), string symbol = default(string), double? matchedVolume = default(double?), double? requestedPrice = default(double?), string traderAccountAssetId = default(string), double? matchedCloseVolume = default(double?), double? closePrice = default(double?), System.DateTime? openDate = default(System.DateTime?), System.DateTime? closeDate = default(System.DateTime?), double? fpl = default(double?), double? pnL = default(double?), double? pnlInUsd = default(double?), double? volumeUsdAtOpen = default(double?), double? volumeUsdAtClose = default(double?))
        {
            Id = id;
            TraderCounterPartyId = traderCounterPartyId;
            TraderAccountId = traderAccountId;
            Symbol = symbol;
            MatchedVolume = matchedVolume;
            Status = status;
            Direction = direction;
            RequestedPrice = requestedPrice;
            TraderAccountAssetId = traderAccountAssetId;
            Volume = volume;
            MatchedCloseVolume = matchedCloseVolume;
            OpenPrice = openPrice;
            ClosePrice = closePrice;
            OpenDate = openDate;
            CloseDate = closeDate;
            CloseReason = closeReason;
            OpenCommission = openCommission;
            CloseCommission = closeCommission;
            SwapCommission = swapCommission;
            FillType = fillType;
            Fpl = fpl;
            PnL = pnL;
            PnlInUsd = pnlInUsd;
            VolumeUsdAtOpen = volumeUsdAtOpen;
            VolumeUsdAtClose = volumeUsdAtClose;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "traderCounterPartyId")]
        public string TraderCounterPartyId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "traderAccountId")]
        public string TraderAccountId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "symbol")]
        public string Symbol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "matchedVolume")]
        public double? MatchedVolume { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Open', 'Closed'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public PositionStatus Status { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Buy', 'Sell'
        /// </summary>
        [JsonProperty(PropertyName = "direction")]
        public TradingOrderDirection Direction { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requestedPrice")]
        public double? RequestedPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "traderAccountAssetId")]
        public string TraderAccountAssetId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "volume")]
        public double Volume { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "matchedCloseVolume")]
        public double? MatchedCloseVolume { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openPrice")]
        public double OpenPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "closePrice")]
        public double? ClosePrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openDate")]
        public System.DateTime? OpenDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "closeDate")]
        public System.DateTime? CloseDate { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'None', 'Close', 'StopLoss',
        /// 'TakeProfit', 'StopOut', 'Canceled', 'CanceledBySystem'
        /// </summary>
        [JsonProperty(PropertyName = "closeReason")]
        public OrderCloseReason CloseReason { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openCommission")]
        public double OpenCommission { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "closeCommission")]
        public double CloseCommission { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "swapCommission")]
        public double SwapCommission { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'FillOrKill', 'PartialFill'
        /// </summary>
        [JsonProperty(PropertyName = "fillType")]
        public OrderFillType FillType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fpl")]
        public double? Fpl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pnL")]
        public double? PnL { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pnlInUsd")]
        public double? PnlInUsd { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "volumeUsdAtOpen")]
        public double? VolumeUsdAtOpen { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "volumeUsdAtClose")]
        public double? VolumeUsdAtClose { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
