// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MarginTrading.RiskManagerClient.Models
{
    using MarginTrading.RiskManagerClient;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class PositionMonitorResponse
    {
        /// <summary>
        /// Initializes a new instance of the PositionMonitorResponse class.
        /// </summary>
        public PositionMonitorResponse()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PositionMonitorResponse class.
        /// </summary>
        public PositionMonitorResponse(double value, bool isLowerSoftLimitSet, bool isLowerHardLimitSet, bool isUpperSoftLimitSet, bool isUpperHardLimitSet, bool isLowerSoftLimitBreached, bool isLowerHardLimitBreached, bool isUpperSoftLimitBreached, bool isUpperHardLimitBreached, string counterPartyId = default(string), string assetId = default(string), double? lowerSoftLimit = default(double?), double? lowerHardLimit = default(double?), double? upperSoftLimit = default(double?), double? upperHardLimit = default(double?))
        {
            Value = value;
            CounterPartyId = counterPartyId;
            AssetId = assetId;
            LowerSoftLimit = lowerSoftLimit;
            LowerHardLimit = lowerHardLimit;
            UpperSoftLimit = upperSoftLimit;
            UpperHardLimit = upperHardLimit;
            IsLowerSoftLimitSet = isLowerSoftLimitSet;
            IsLowerHardLimitSet = isLowerHardLimitSet;
            IsUpperSoftLimitSet = isUpperSoftLimitSet;
            IsUpperHardLimitSet = isUpperHardLimitSet;
            IsLowerSoftLimitBreached = isLowerSoftLimitBreached;
            IsLowerHardLimitBreached = isLowerHardLimitBreached;
            IsUpperSoftLimitBreached = isUpperSoftLimitBreached;
            IsUpperHardLimitBreached = isUpperHardLimitBreached;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public double Value { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "counterPartyId")]
        public string CounterPartyId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assetId")]
        public string AssetId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lowerSoftLimit")]
        public double? LowerSoftLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lowerHardLimit")]
        public double? LowerHardLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "upperSoftLimit")]
        public double? UpperSoftLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "upperHardLimit")]
        public double? UpperHardLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isLowerSoftLimitSet")]
        public bool IsLowerSoftLimitSet { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isLowerHardLimitSet")]
        public bool IsLowerHardLimitSet { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isUpperSoftLimitSet")]
        public bool IsUpperSoftLimitSet { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isUpperHardLimitSet")]
        public bool IsUpperHardLimitSet { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isLowerSoftLimitBreached")]
        public bool IsLowerSoftLimitBreached { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isLowerHardLimitBreached")]
        public bool IsLowerHardLimitBreached { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isUpperSoftLimitBreached")]
        public bool IsUpperSoftLimitBreached { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isUpperHardLimitBreached")]
        public bool IsUpperHardLimitBreached { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
