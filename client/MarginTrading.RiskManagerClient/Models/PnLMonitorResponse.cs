// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MarginTrading.RiskManagerClient.Models
{
    using MarginTrading.RiskManagerClient;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class PnLMonitorResponse
    {
        /// <summary>
        /// Initializes a new instance of the PnLMonitorResponse class.
        /// </summary>
        public PnLMonitorResponse()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PnLMonitorResponse class.
        /// </summary>
        public PnLMonitorResponse(double value, bool isSoftLimitSet, bool isHardLimitSet, bool isSoftLimitBreached, bool isHardLimitBreached, string counterPartyId = default(string), double? softLimit = default(double?), double? hardLimit = default(double?))
        {
            CounterPartyId = counterPartyId;
            Value = value;
            SoftLimit = softLimit;
            HardLimit = hardLimit;
            IsSoftLimitSet = isSoftLimitSet;
            IsHardLimitSet = isHardLimitSet;
            IsSoftLimitBreached = isSoftLimitBreached;
            IsHardLimitBreached = isHardLimitBreached;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "counterPartyId")]
        public string CounterPartyId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public double Value { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "softLimit")]
        public double? SoftLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hardLimit")]
        public double? HardLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isSoftLimitSet")]
        public bool IsSoftLimitSet { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isHardLimitSet")]
        public bool IsHardLimitSet { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isSoftLimitBreached")]
        public bool IsSoftLimitBreached { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isHardLimitBreached")]
        public bool IsHardLimitBreached { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
